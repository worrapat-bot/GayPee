using UnityEngine;

[RequireComponent(typeof(AudioSource))]
public class HauntedLightDeluxe : MonoBehaviour
{
    [Header("üí° Light Settings")]
    public Light lightSource;
    [Tooltip("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü")]
    public float minIntensity = 0.2f;
    public float maxIntensity = 1.5f;
    [Tooltip("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö (‡∏™‡∏∏‡πà‡∏°)")]
    public float minFlickerTime = 0.05f;
    public float maxFlickerTime = 0.2f;

    [Header("‚ö° Outage Settings")]
    [Tooltip("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÑ‡∏ü‡∏à‡∏∞‡∏î‡∏±‡∏ö‡∏¢‡∏≤‡∏ß (0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ, 1 = ‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏≠‡∏î)")]
    [Range(0f, 1f)] public float outageChance = 0.05f;
    [Tooltip("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏î‡∏±‡∏ö‡∏ô‡∏≤‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")]
    public float outageDuration = 2f;

    [Header("üîä Sound Settings")]
    public AudioSource flickerSound;
    public AudioClip flickerClip;
    [Range(0f, 1f)] public float flickerVolume = 0.8f;
    [Tooltip("‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏∞‡∏î‡∏±‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà")]
    public float minHearDistance = 3f;
    [Tooltip("‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Å‡∏•‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏≤‡πÜ")]
    public float maxHearDistance = 15f;

    private float timer;
    private bool isOutage = false;
    private float outageTimer = 0f;

    void Start()
    {
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Light
        if (lightSource == null)
        {
            lightSource = GetComponent<Light>();
            if (lightSource == null)
                Debug.LogWarning("HauntedLightDeluxe: ‡πÑ‡∏°‡πà‡∏°‡∏µ Light ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ô‡∏µ‡πâ!");
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Audio
        if (flickerSound == null)
            flickerSound = GetComponent<AudioSource>();

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á 3D ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞
        flickerSound.spatialBlend = 1f;       // 1 = 3D Sound
        flickerSound.minDistance = minHearDistance;
        flickerSound.maxDistance = maxHearDistance;
        flickerSound.volume = flickerVolume;
        flickerSound.loop = false;
        flickerSound.playOnAwake = false;

        ChangeLight();
    }

    void Update()
    {
        if (isOutage)
        {
            outageTimer -= Time.deltaTime;
            if (outageTimer <= 0)
            {
                // üîÅ ‡πÑ‡∏ü‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏¥‡∏î
                isOutage = false;
                lightSource.enabled = true;
                ChangeLight();
            }
            return;
        }

        timer -= Time.deltaTime;
        if (timer <= 0)
            ChangeLight();
    }

    void ChangeLight()
    {
        // ‚ö° ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÑ‡∏ü‡∏î‡∏±‡∏ö‡∏¢‡∏≤‡∏ß
        if (Random.value < outageChance)
        {
            StartOutage();
            return;
        }

        // üí° ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
        if (lightSource != null)
            lightSource.intensity = Random.Range(minIntensity, maxIntensity);

        // üîä ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ü‡∏ã‡πà‡∏≤‡∏ö‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞
        if (flickerClip && Random.value > 0.7f)
            flickerSound.PlayOneShot(flickerClip, flickerVolume);

        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        timer = Random.Range(minFlickerTime, maxFlickerTime);
    }

    void StartOutage()
    {
        isOutage = true;
        outageTimer = outageDuration;
        if (lightSource != null)
            lightSource.enabled = false;

        // üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ü‡∏ä‡πá‡∏≠‡∏ï‡∏ï‡∏≠‡∏ô‡∏î‡∏±‡∏ö
        if (flickerClip)
            flickerSound.PlayOneShot(flickerClip, flickerVolume);
    }
}